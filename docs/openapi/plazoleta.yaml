openapi: 3.0.3
info:
  title: plazoleta-service API
  version: 1.0.0
  description: API for restaurants and plates
servers:
  - url: http://localhost:8082
security:
  - bearerAuth: []
paths:
  /api/v1/restaurants:
    post:
      tags: [Restaurants]
      summary: Create restaurant (ADMIN)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantCreateRequest'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URI of the created resource
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401': { description: Unauthorized }
        '403': { description: Forbidden (requires ADMIN) }
        '404':
          description: Owner not found or not OWNER role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: NIT already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/plates:
    post:
      tags: [Plates]
      summary: Create plate (OWNER of the restaurant)
      description: Only the restaurant owner can create plates for their restaurant. Initial status is active = true.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlateCreateRequest'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URI of the created resource
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlateResponse'
        '400':
          description: Validation error (price > 0, required fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401': { description: Unauthorized }
        '403':
          description: Forbidden (requires OWNER and ownership of the restaurant)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Plate with same name already exists in restaurant (if applicable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RestaurantCreateRequest:
      type: object
      required: [name, nit, address, phone, logoUrl, ownerId]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          pattern: "^(?!\\d+$).+$"
        nit:
          type: string
          minLength: 1
          maxLength: 20
          pattern: "^\\d+$"
        address:
          type: string
          maxLength: 200
        phone:
          type: string
          maxLength: 13
          pattern: "^\\+?\\d{1,13}$"
        logoUrl:
          type: string
          format: uri
          maxLength: 255
        ownerId:
          type: integer
          format: int64
    RestaurantResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        nit: { type: string }
        address: { type: string }
        phone: { type: string }
        logoUrl: { type: string }
        ownerId: { type: integer, format: int64 }

    PlateCreateRequest:
      type: object
      required: [name, price, description, imageUrl, category, restaurantId]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        price:
          type: integer
          minimum: 1
        description:
          type: string
          minLength: 1
          maxLength: 1000
        imageUrl:
          type: string
          format: uri
          maxLength: 255
        category:
          $ref: '#/components/schemas/PlateCategory'
        restaurantId:
          type: integer
          format: int64

    PlateResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        price: { type: integer }
        description: { type: string }
        imageUrl: { type: string }
        category: { $ref: '#/components/schemas/PlateCategory' }
        active: { type: boolean }
        restaurantId: { type: integer, format: int64 }

    PlateCategory:
      type: string
      enum: [ENTRADA, PRINCIPAL, POSTRE, BEBIDA]

    ErrorResponse:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        path: { type: string }
        message: { type: string }
        code: { type: string }


